{"version":3,"sources":["components/Question.js","routes/__StartTest.js","routes/Home.js","components/Navigation.js","routes/Login.js","routes/Plan.js","routes/UserScore.js","functions/ProtectedRoute.js","functions/authService.js","routes/UserScorePerson.js","routes/UserTestQuestion.js","routes/CreateTest.js","routes/Retest.js","routes/CreateUser.js","routes/AllUsers.js","components/WordTable.js","routes/WordList.js","routes/WordTest.js","App.js","index.js"],"names":["React","Component","__StartTest","Home","props","history","useHistory","useState","retests","setRetests","tests","setTests","token","localStorage","getItem","today","Date","String","getDate","padStart","getMonth","getFullYear","useEffect","a","axios","get","headers","Authorization","retest","data","plans","getRetest","Container","className","fluid","Row","Col","md","span","offset","appUser","Table","striped","bordered","hover","map","plan","idx","testDate","level","from","to","testType","onClick","push","pathname","state","questionType","range","Navigation","roles","Navbar","collapseOnSelect","expand","variant","style","backgroundColor","Brand","as","Link","alt","src","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","clear","setAppToken","setAppUser","Login","useForm","register","handleSubmit","errorMessage","setErrorMessage","onSubmit","post","accessToken","setItem","name","Form","Group","Image","Label","Control","type","required","placeholder","size","Button","fontSize","color","Plan","setTestType","setLevel","setTestDate","setFrom","setTo","setQuestionType","event","preventDefault","console","log","controlId","onChange","e","target","value","UserScore","users","setUsers","searchTerm","setSearchTerm","searchCategory","setSearchCategory","then","result","FormControl","placecholder","ListGroup","filter","user","toLowerCase","includes","username","ProtectedRoute","path","component","render","rest","jwtDecoded","current_time","now","jwt_decode","err","exp","isAuthenticated","UserScorePerson","location","exam","setExam","quiz","Card","isRetest","Header","date","Body","Text","isPass","UserTestQuestion","examQuestions","examQuestion","sentenceResponses","sort","examQuestion1","examQuestion2","question_num","questionAnswer","setQuestionAnswer","questionsOrSentence","split","editIsCorrect","questionId","patch","examId","response","catch","alert","average","answer","isCorrect","isMeaning","question","CreateTest","xlsx","require","buttonState","setButtonState","reader","FileReader","onload","evt","bstr","wb","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","readAsBinaryString","Retest","splitRange","url","questions","setQuestions","myAnswers","setMyAnswers","answers","setAnswers","questionNum","setQuestionNum","setIsMeaning","setIsCorrect","originalQuestion","setOriginalQuestion","submitButton","setSubmitButton","length","localQuestions","localAnswers","localQuestionNum","localIsMeaning","entries","i","submitAnswers","checkVocabAnswers","tmpIsCorrect","correctAnswer","myAnswer","index","handleChange","CreateUser","watch","formState","errors","levels","item","AllUsers","WordTable","wordList","word","WordList","role","setWordList","words","sentence","WordTest","Math","round","random","App","setToken","setUser","appToken","exact","defaults","baseURL","process","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecacc6c2.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Col, Row } from \"react-bootstrap\";\n\nclass Question extends React.Component {\n  handleChange = (event) => {\n    this.props.onChange(event, this.props.index);\n  };\n  render() {\n    return (\n      <Form.Group as={Row} controlId={this.props.question_num}>\n        <Form.Label column sm={2}>\n          {this.props.question_num}. {this.props.question}\n        </Form.Label>\n        <Col sm={5}>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"answer -> 모르면 x 적기\"\n            onChange={this.handleChange}\n            name={this.props.question_num}\n            required\n          />\n        </Col>\n        <Col sm={2}>\n          {this.props.isCorrect ? <h1>{this.props.isCorrect}</h1> : null}\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n// function Question({ id, level, question_num, question, answer, handleChange }) {\n//   return (\n//     <Form.Group as={Row} controlId={question_num}>\n//       <Form.Label column sm={2}>\n//         {question_num}. {question}\n//       </Form.Label>\n//       <Col sm={10}>\n//         <Form.Control type=\"text\" placeholder=\"answer\" />\n//       </Col>\n//     </Form.Group>\n//   );\n// }\n\n// Question.propTypes = {\n//   id: PropTypes.string,\n//   level: PropTypes.string,\n//   question_num: PropTypes.number.isRequired,\n//   question: PropTypes.string.isRequired,\n//   answer: PropTypes.string.isRequired,\n// };\n\nexport default Question;\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport Question from '../components/Question'\nimport {Form, Container, Button, Dropdown} from 'react-bootstrap'\nimport {useHistory} from 'react-router-dom'\n\nfunction __StartTest() {\n    const history = useHistory()\n\n    // init state\n    // states for Vocab Test\n    const [questions, setQuestions] = useState([]) // set either english or Korean\n    const [myAnswers, setMyAnswers] = useState([]) // user's answers\n    const [answers, setAnswers] = useState([])\n    const [isCorrect, setIsCorrect] = useState([]) // isCorrect ? true : false\n    const [questionNum, setQuestionNum] = useState([]) // Question number for each\n    const [isMeaning, setIsMeaning] = useState([]) // isMeaning ? true : false\n    const [originalQuestion, setOriginalQuestion] = useState([])\n\n    // states for Sentence Test\n    const [questionsSentence, setQuestionsSentence] = useState([]) // set either english or Korean\n    const [myAnswersSentence, setMyAnswersSentence] = useState([]) // user's answers\n    const [answersSentence, setAnswersSentence] = useState([])\n    const [isCorrectSentence, setIsCorrectSentence] = useState([]) // isCorrect ? true : false\n    const [questionNumSentence, setQuestionNumSentence] = useState([]) // Question number for each\n    const [isMeaningSentence, setIsMeaningSentence] = useState([]) // isMeaning ? true : false\n    const [originalQuestionSentence, setOriginalQuestionSentence] = useState([])\n\n    // shows submit button at first and when submitted, hide submit button and show home page button\n    const [showSubmitButtonVocab, setShowSubmitButtonVocab] = useState(true)\n    const [showSubmitButtonSentence, setShowSubmitButtonSentence] = useState(true)\n\n    // show and hide vocab test section\n    const [showVocabTest, setShowVocabTest] = useState(false)\n    const [vocabButtonText, setVocabButtonText] = useState('Start Vocab Test')\n\n    // show and hide sentence test seciton\n    const [showSentenceTest, setShowSentenceTest] = useState(false)\n    const [sentenceButtonText, setSentenceButtonText] = useState(\n        'Start Sentence Test',\n    )\n\n    // Get value from local storage\n    const userLevel = localStorage.getItem('level')\n    const token = localStorage.getItem('token')\n\n    useEffect(() => {\n        // request to get today's vocab question\n        axios\n            .get(`questions/todayQuestions?testType=word`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((result) => {\n                // check if test exists\n                if (result.data.length === 0) {\n                    setShowSubmitButtonVocab(false)\n                    return\n                }\n                setOriginalQuestion(result.data)\n                assignStates(result.data, \"word\")\n            })\n\n        // request to get today's sentence questions\n        axios\n            .get(`sentence/todayQuestions?testType=sentence`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((result) => {\n                // check if test exists\n                if (result.data.length === 0) {\n                    setShowSubmitButtonSentence(false)\n                    return\n                }\n                setOriginalQuestionSentence(result.data)\n                assignStates(result.data, \"sentence\");\n            })\n    }, [])\n\n    /**\n     * Helper function to reduce redundancy in question and sentence\n     */\n    const assignStates = ((data, testType) => {\n        let localQuestions = []\n        let localAnswers = []\n        let localQuestionNum = []\n        let localIsMeanig = []\n\n        for (let [i, question] of data.entries()) {\n            localQuestions[i] = question.question\n            localAnswers[i] = question.answer\n            localQuestionNum[i] = question.question_num\n            localIsMeanig[i] = question.isMeaning\n        }\n\n        // mix the localAnswers -> word bank list words in different order\n        // TODO\n\n        if(testType === \"sentence\") {\n            setQuestionsSentence(localQuestions)\n            setAnswersSentence(localAnswers)\n            setQuestionNumSentence(localQuestionNum)\n            setIsMeaningSentence(localIsMeanig)\n        } else {\n            setQuestions(localQuestions)\n            setAnswers(localAnswers)\n            setQuestionNum(localQuestionNum)\n            setIsMeaning(localIsMeanig)\n        }\n    })\n\n    const submitVocabAnswers = async (event) => {\n        event.preventDefault()\n        checkVocabAnswers()\n\n        let range =\n            userLevel +\n            '_' +\n            questionNum[0] +\n            '_' +\n            questionNum[questionNum.length - 1]\n\n        let data = {\n            testType: 'word',\n            question_num: questionNum,\n            questions,\n            range: range,\n            answer: answers,\n            myAnswers,\n            isMeaning,\n            retest: false\n        }\n\n        await axios.post('response', data, {\n            headers: {Authorization: `Bearer ${token}`},\n        })\n\n        setShowSubmitButtonVocab(false)\n    }\n\n    const submitSentenceAnswers = async (event) => {\n        event.preventDefault()\n        checkSentenceAnswers()\n\n        let range =\n            userLevel +\n            '_' +\n            questionNumSentence[0] +\n            '_' +\n            questionNumSentence[questionNumSentence.length - 1]\n\n        let data = {\n            testType: 'sentence',\n            question_num: questionNumSentence,\n            questions: questionsSentence,\n            range: range,\n            answer: answersSentence,\n            myAnswers: myAnswersSentence,\n            isMeaning: isMeaningSentence,\n            retest: false\n        }\n        await axios.post('response', data, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n        })\n\n        setShowSubmitButtonSentence(false)\n    }\n\n    /**\n     * TODO - Answer Check Algorithm\n     * Algorithm for checking if answer is correct\n     * Another answer check happens in the backend [in case altered by user]\n     */\n    const checkVocabAnswers = () => {\n        let tmpIsCorrect = []\n        for (let i in answers) {\n            let correctAnswer = answers[i]\n            let myAnswer = myAnswers[i]\n\n            tmpIsCorrect[i] = correctAnswer === myAnswer ? 'correct' : 'wrong'\n        }\n        setIsCorrect(tmpIsCorrect)\n        // https://en.wikipedia.org/wiki/Levenshtein_distance\n    }\n\n    const checkSentenceAnswers = () => {\n        let tmpIsCorrect = []\n        for (let i in answersSentence) {\n            let correctAnswer = answersSentence[i]\n            let myAnswer = myAnswersSentence[i]\n\n            tmpIsCorrect[i] = correctAnswer === myAnswer ? 'correct' : 'wrong'\n        }\n        setIsCorrectSentence(tmpIsCorrect)\n        // https://en.wikipedia.org/wiki/Levenshtein_distance\n    }\n\n    const handleChange = (event, index) => {\n        let localAnswers = [...myAnswers]\n        // CHECK -> later if I want to send data to backend to check , uncomment below and add data values\n        // localAnswers[index] = {\n        //   question_num: +event.target.name,\n        //   answer: event.target.value,\n        // };\n        localAnswers[index] = event.target.value\n        setMyAnswers(localAnswers)\n    }\n\n    const handleSentenceChange = (event, index) => {\n        let localAnswers = [...myAnswersSentence]\n        // CHECK -> later if I want to send data to backend to check , uncomment below and add data values\n        // localAnswers[index] = {\n        //   question_num: +event.target.name,\n        //   answer: event.target.value,\n        // };\n        localAnswers[index] = event.target.value\n        setMyAnswersSentence(localAnswers)\n    }\n\n    /**\n     * Show and hide vocab test section on button press\n     */\n    const toggleVocabTest = () => {\n        if (showVocabTest) {\n            setShowVocabTest(false)\n            setVocabButtonText('Start Vocab Test')\n        } else {\n            setShowVocabTest(true)\n            setVocabButtonText('Hide Vocab Test')\n        }\n    }\n\n    /**\n     * Show and hide sentence test section on button press\n     */\n    const toggleSentenceTest = () => {\n        if (showSentenceTest) {\n            setShowSentenceTest(false)\n            setSentenceButtonText('Start Sentence Test')\n        } else {\n            setShowSentenceTest(true)\n            setSentenceButtonText('Hide Sentence Test')\n        }\n    }\n\n    return (\n        <Container>\n            <Button onClick={toggleVocabTest} variant=\"warning\">\n                {vocabButtonText}\n            </Button>\n            <Button onClick={toggleSentenceTest} variant=\"info\">\n                {sentenceButtonText}\n            </Button>\n            {showVocabTest ? (\n                <form onSubmit={submitVocabAnswers}>\n                    <Form.Group>\n                        <h1>Today's Vocab Test</h1>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                                Word Bank\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {answers.map((answer, i) => (\n                                    <Dropdown.Item key={i}>{answer}</Dropdown.Item>\n                                ))}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                        {originalQuestion.map((question, i) => (\n                            <Question\n                                key={question.id}\n                                question_num={question.question_num}\n                                question={question.question}\n                                onChange={handleChange}\n                                isCorrect={isCorrect[i]}\n                                index={i}\n                            />\n                        ))}\n                    </Form.Group>\n                    {showSubmitButtonVocab ? (\n                        <Button name=\"wordBtn\" type=\"submit\" color=\"primary\" size=\"lg\">\n                            Submit\n                        </Button>\n                    ) : (\n                        <Button\n                            onClick={(event) => history.push('/')}\n                            size=\"lg\"\n                            color=\"success\"\n                            variant=\"success\"\n                        >\n                            Home Page\n                        </Button>\n                    )}\n                </form>\n            ) : null}\n            {showSentenceTest ? (\n                <form onSubmit={submitSentenceAnswers}>\n                    <Form.Group>\n                        <h1>Today's Sentence Test</h1>\n                        {originalQuestionSentence.map((question, i) => (\n                            <Question\n                                key={question.id}\n                                question_num={question.question_num}\n                                question={question.question}\n                                onChange={handleSentenceChange}\n                                isCorrect={isCorrectSentence[i]}\n                                index={i}\n                            />\n                        ))}\n                    </Form.Group>\n                    {showSubmitButtonSentence ? (\n                        <Button name=\"sentenceBtn\" type=\"submit\" color=\"primary\" size=\"lg\">\n                            Submit\n                        </Button>\n                    ) : (\n                        <Button\n                            onClick={(event) => history.push('/')}\n                            size=\"lg\"\n                            color=\"success\"\n                            variant=\"success\"\n                        >\n                            Home Page\n                        </Button>\n                    )}\n                </form>\n            ) : null}\n        </Container>\n    )\n}\n\nexport default __StartTest\n","import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport {Table} from 'react-bootstrap'\nimport {useHistory} from \"react-router-dom\";\n\nfunction Home(props) {\n    const history = useHistory();\n    const [retests, setRetests] = useState([]);\n    const [tests, setTests] = useState([]);\n\n    const token = localStorage.getItem('token')\n\n    // GET today's date\n    const today = new Date()\n    const dd = String(today.getDate()).padStart(2, '0')\n    const mm = String(today.getMonth() + 1).padStart(2, '0')\n    const yyyy = today.getFullYear()\n    const testDate = yyyy + '-' + mm + '-' + dd\n\n    useEffect(() => {\n        async function getRetest() {\n            try {\n                if (token) {\n                    const retest = await axios.get('retests', {\n                        headers: {Authorization: `Bearer ${token}`},\n                    })\n                    setRetests(retest.data);\n\n                    // grab plan that belongs to the user\n                    const plans = await axios.get('plan', {\n                        headers: {Authorization: `Bearer ${token}`},\n                    })\n                    setTests(plans.data);\n                }\n            } catch (err) {\n                setRetests([]);\n            }\n        }\n\n        getRetest()\n    }, []);\n\n\n    return (\n        <Container className=\"mt-4\" fluid>\n            <Row>\n                <Col md={{span: 4, offset: 4}}>\n                    <h1>Welcome {props.appUser}!</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{span: 2, offset: 0}}>\n                    <h3>My Tests</h3>\n                </Col>\n            </Row>\n            {/*Table for Tests (plans)*/}\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Test Date</th>\n                    <th>Test Range</th>\n                    <th>Test Type</th>\n                    <th>Start Test</th>\n                </tr>\n                </thead>\n                <tbody>\n                {tests.map((plan, idx) => {\n                    return !plan ? null : (\n                        <tr key={idx}>\n                            <td>{idx + 1}</td>\n                            <td>{plan.testDate}</td>\n                            <td>{plan.level}_{plan.from}_{plan.to}</td>\n                            <td>{plan.testType}</td>\n                            <td>\n                                <button onClick={() => history.push({\n                                    pathname: '/startTest',\n                                    state: {\n                                        level: plan.level,\n                                        from: plan.from,\n                                        to: plan.to,\n                                        testType: plan.testType,\n                                        questionType: plan.questionType,\n                                        retest: false\n                                    }\n                                })}>Take Test\n                                </button>\n                            </td>\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </Table>\n            {/* Table for Retests*/}\n            <Row>\n                <Col md={{span: 2, offset: 0}}>\n                    <h3>My Retests</h3>\n                </Col>\n            </Row>\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Test Date</th>\n                    <th>Test Range</th>\n                    <th>Test Type</th>\n                    <th>Start Retest</th>\n                </tr>\n                </thead>\n                <tbody>\n                {retests.map((retest, idx) => {\n                    return !retest ? null : (\n                        <tr key={idx}>\n                            <td>{idx + 1}</td>\n                            <td>{retest.testDate}</td>\n                            <td>{retest.range}</td>\n                            <td>{retest.testType}</td>\n                            <td>\n                                <button onClick={() => history.push({\n                                    pathname: '/retests',\n                                    // pathname: '/startTest',\n                                    state: {range: retest.range, testType: retest.testType}\n                                    // state: { level: retest.range.split(\"_\")[0],\n                                    //     from: retest.range.split(\"_\")[1],\n                                    //     to: retest.range.split(\"_\")[2],\n                                    //     testType: retest.testType,\n                                    //     retest: true\n                                    // }\n                                })}>Take Retest\n                                </button>\n                            </td>\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </Table>\n        </Container>\n    )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\nimport { Link, useHistory } from 'react-router-dom'\n\nfunction Navigation(props) {\n  const history = useHistory()\n\n  /*// instead of handling token and user here, handled in App.js so that Login component \n  // and Navbar components can both get access\n   const [token, setToken] = useState(localStorage.getItem(\"token\"));\n   const [user, setUser] = useState(localStorage.getItem(\"name\")); */\n\n  const logout = () => {\n    localStorage.clear()\n    props.setAppToken('')\n    props.setAppUser('')\n    history.push('/')\n  }\n  const roles = localStorage.getItem('roles')\n  return (\n    <div>\n      <Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        variant=\"light\"\n        style={{ backgroundColor: '#848484' }}\n      >\n        <Navbar.Brand as={Link} to=\"/\">\n          <img\n            alt=\"\"\n            src=\"/academy-frontend/eie_logo.png\"\n            // width=\"30\"\n            // height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n          {/* Academy App */}\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {/* <Nav.Link as={Link} to=\"/\">\n              Home\n            </Nav.Link> */}\n            {/*{roles === 'user' || roles === 'admin' ? (*/}\n            {/*  <Nav.Link as={Link} to=\"/startTest\">*/}\n            {/*    Test*/}\n            {/*  </Nav.Link>*/}\n            {/*) : null}*/}\n            {roles === 'admin' && props.appUser !== '' ? (\n              <Nav.Link as={Link} to=\"/createPlan\">\n                Create Plan\n              </Nav.Link>\n            ) : null}\n            {roles === 'user' && roles === 'admin' ? (\n              <Nav.Link as={Link} to=\"/createTest\">\n                Create Test\n              </Nav.Link>\n            ) : null}\n            {roles === 'user' || roles === 'admin' ? (\n              <Nav.Link as={Link} to=\"/word-list\">\n                Word List\n              </Nav.Link>\n            ) : null}\n            {roles === 'admin' && props.appUser !== '' ? (\n              <Nav.Link as={Link} to=\"/user-scores\">\n                Find User Score\n              </Nav.Link>\n            ) : null}\n            {roles === 'admin' && props.appUser !== '' ? (\n              <Nav.Link as={Link} to=\"/create-users\">\n                Create New User\n              </Nav.Link>\n            ) : null}\n            {roles === 'admin' && props.appUser !== '' ? (\n                <Nav.Link as={Link} to=\"/users\">\n                 Users\n                </Nav.Link>\n            ) : null}\n          </Nav>\n          <Nav className=\"ms-auto\">\n            {!props.appUser ? (\n              <Nav.Link as={Link} to=\"/signin\">\n                Login\n              </Nav.Link>\n            ) : (\n              <Nav>\n                <NavDropdown title={props.appUser}>\n                  <NavDropdown.Item onClick={logout}>Logout</NavDropdown.Item>\n                </NavDropdown>\n              </Nav>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default Navigation\n","import axios from 'axios'\nimport React, {useState} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport {Button, Container, Form, Image} from \"react-bootstrap\";\nimport {useForm} from \"react-hook-form\";\n\nfunction Login(props) {\n    const history = useHistory()\n\n    const {register, handleSubmit} = useForm();\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const onSubmit = async (data) => {\n\n        try {\n            const accessToken = await axios.post('auth/signin', data)\n            localStorage.setItem('token', accessToken.data.accessToken)\n            localStorage.setItem('name', accessToken.data.name)\n            localStorage.setItem('roles', accessToken.data.roles)\n            localStorage.setItem('level', accessToken.data.level)\n            // to change navbar from login -> username (handled in App.js)\n            props.setAppUser(accessToken.data.name)\n            history.push('/')\n        } catch (error) {\n            // failed login\n            setErrorMessage('Login failed. Please check your id or password')\n        }\n    }\n\n    return (\n        <Container className=\"d-flex justify-content-center vh-100 align-items-center\">\n            <Form onSubmit={handleSubmit(onSubmit)} >\n                <Form.Group className=\"d-flex justify-content-center mb-3 row g-2\">\n                    <Image src=\"/academy-frontend/eie_logo.png\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-2 row g-2\" >\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" {...register('username', {required: true})} placeholder=\"username\" size=\"lg\"/>\n                </Form.Group >\n                <Form.Group className=\"mb-3 row g-2\">\n                    <Form.Label>password</Form.Label>\n                    <Form.Control type=\"password\" {...register('password', {required: true})} placeholder=\"password\" size=\"lg\"/>\n                </Form.Group>\n                <Form.Group className=\"d-flex justify-content-center mb-3 row g-2\">\n                    <Button variant=\"success\" type=\"submit\" size=\"lg\">Login</Button>\n                </Form.Group>\n            </Form>\n            <div style={{fontSize: 20, color: 'red'}}>{errorMessage}</div>\n        </Container>\n    )\n}\n\nexport default Login\n","import axios from 'axios'\nimport React, { useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\n\nfunction Plan() {\n  const history = useHistory()\n\n  const [testType, setTestType] = useState('')\n  const [level, setLevel] = useState('')\n  const [testDate, setTestDate] = useState('')\n  const [from, setFrom] = useState('')\n  const [to, setTo] = useState('')\n  const [questionType, setQuestionType] = useState('')\n\n  const onSubmit = async (event) => {\n    event.preventDefault()\n\n    // const data = {\n    //     testType: this.testType,\n    //     level: this.level,\n    //     testDate: this.date,\n    //     from: this.from,\n    //     to: this.to,\n    //     questionType: this.questionType,\n    // }\n    const data = { testType, level, testDate, from, to, questionType }\n\n    try {\n      const token = localStorage.getItem('token')\n      await axios.post('plan/createPlan', data, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      history.push(\"/\");\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group controlId=\"level\">\n        <Form.Label>Test Type</Form.Label>\n        <br />\n        <select onChange={(e) => setTestType(e.target.value)} required>\n          <option>Select Test Type...</option>\n          <option value=\"word\">Word Questions</option>\n          <option value=\"sentence\">Sentence Questions</option>\n        </select>\n      </Form.Group>\n      <Form.Group controlId=\"level\">\n        <Form.Label>Level</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter Level\"\n          onChange={(e) => setLevel(e.target.value)}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"testDate\">\n        <Form.Label>Test Date</Form.Label>\n        <Form.Control\n          type=\"date\"\n          onChange={(e) => setTestDate(e.target.value)}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"from\">\n        <Form.Label>From</Form.Label>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"From: \"\n          onChange={(e) => setFrom(e.target.value)}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"to\">\n        <Form.Label>To</Form.Label>\n        <Form.Control\n          type=\"number\"\n          placeholder=\"To: \"\n          onChange={(e) => setTo(e.target.value)}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"questionType\">\n        <Form.Label>Question Type</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"mixed | word | meaning \"\n          onChange={(e) => setQuestionType(e.target.value)}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\" >\n        Submit\n      </Button>\n    </Form>\n  )\n}\n\nexport default Plan\n","/**\n * Page to get user score by admin\n */\n\nimport { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {\n  Container,\n  Form,\n  FormControl,\n  ListGroup,\n  Row,\n  Col,\n} from 'react-bootstrap'\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom'\nimport axios from 'axios'\n\nfunction UserScore() {\n  const history = useHistory()\n\n  // define states\n  const [users, setUsers] = useState([])\n  const [username, setUsername] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [searchCategory, setSearchCategory] = useState('')\n\n  // get data from backend\n  useEffect(() => {\n    // make post request to /getUserScore\n    const token = localStorage.getItem('token')\n    axios\n      .get('auth/users', {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((result) => {\n        setUsers(result.data)\n        // let localUsernames = [];\n        // let localNames = [];\n        // for (let [i, user] of result.data.entries()) {\n        //   localUsernames[i] = user.username;\n        //   localNames[i] = user.name;\n        // }\n        // setUsers(localNames);\n        // setUsername(localUsernames);\n      })\n  }, [])\n\n  const handleChange = (event) => {}\n\n  const search = async (event) => {\n    event.preventDefault()\n  }\n\n  // First show a search bar and the whole user list below\n  // admin can click on the user name to see the user's exam scores\n  return (\n    <Container className=\"mt-4\" fluid>\n      <Row>\n        <Col md={{ span: 2, offset: 4 }}>\n          <FormControl\n            as=\"select\"\n            onChange={(event) => {\n              setSearchCategory(event.target.value)\n            }}\n          >\n            <option value=\"studentName\">Name</option>\n            <option value=\"userName\">Username</option>\n            <option value=\"userLevel\">Level</option>\n          </FormControl>\n        </Col>\n        <Col md={{ span: 4, offset: 0 }}>\n          <FormControl\n            placecholder=\"Search...\"\n            onChange={(event) => {\n              setSearchTerm(event.target.value)\n            }}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={{ span: 6, offset: 4 }}>\n          <ListGroup className=\"mt-2\">\n            {users\n              .filter((user) => {\n                if (searchTerm == '') {\n                  return user\n                } else if (\n                  searchCategory === 'studentName' &&\n                  user.name.toLowerCase().includes(searchTerm.toLowerCase())\n                ) {\n                  return user\n                } else if (\n                  searchCategory === 'userName' &&\n                  user.username.toLowerCase().includes(searchTerm.toLowerCase())\n                ) {\n                  return user\n                } else if (\n                  searchCategory === 'userLevel' &&\n                  user.level.toLowerCase().includes(searchTerm.toLowerCase())\n                ) {\n                  return user\n                }\n              })\n              .map((user, idx) => {\n                return (\n                  <ListGroup.Item\n                    key={idx}\n                    as=\"button\"\n                    variant=\"success\"\n                    style={{ color: 'black' }}\n                    onClick={(event) => {\n                      history.push({\n                        pathname: '/user-scores/person',\n                        state: { user: user },\n                      })\n                    }}\n                  >\n                    {user.name} - {user.username} - {user.level}\n                  </ListGroup.Item>\n                )\n              })}\n          </ListGroup>\n        </Col>\n      </Row>\n\n      {/* {username.map((user, index) => {\n        return <div key={index}>{user}</div>;\n      })} */}\n    </Container>\n  )\n}\n\nexport default UserScore\n","import React, {useEffect} from \"react\";\nimport {Route, Redirect, useHistory} from \"react-router-dom\";\nimport isAuthenticated from \"./authService\";\n\nexport const ProtectedRoute = ({\n                                   path,\n                                   component: Component,\n                                   render,\n                                   setAppToken,\n                                   setAppUser,\n                                   ...rest\n                               }) => {\n    //   const history = useHistory();\n    //  const [token, setToken] = useState(\"\");\n    //  const [user, setUser] = useState(\"\");\n\n    /*\n      useEffect(() => {\n        // setAppToken(\"\");\n        // setAppUser(appUser);\n      }, []);\n\n     */\n\n    return (\n        <Route\n            path={path}\n            {...rest}\n            render={(props) => {\n                if (isAuthenticated()) {\n                    return Component ? <Component {...props} /> : render(props);\n                } else {\n                    // this results in error because setting state in the rendering process\n                    //   return history.push(\"/signin\");\n                    // before clearing local storage, set values to null\n                    setAppUser(null);\n                    setAppToken(null);\n                    localStorage.clear();\n                    return <Redirect to=\"/signin\"/>;\n                }\n            }}\n        />\n    );\n};\n\nexport default ProtectedRoute;\n","import jwt_decode from \"jwt-decode\";\n\nexport default function isAuthenticated() {\n  var current_time = Date.now() / 1000;\n  var token = localStorage.getItem(\"token\");\n  var jwtDecoded;\n  try {\n    jwtDecoded = jwt_decode(token);\n  } catch (err) {\n    return false;\n  }\n  if (jwtDecoded.exp < current_time) {\n    // expired\n    return false;\n  }\n  return true;\n}\n","import axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { Container, Card, Row, Col, Button } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\n\nfunction UserScorePerson(props) {\n  const history = useHistory()\n\n  const user = props.location.state.user\n  const [exam, setExam] = useState([])\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    axios\n      .post(\n        'exams/user-scores',\n        { username: user.username },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        },\n      )\n      .then((result) => {\n        setExam(result.data)\n      })\n  }, [])\n\n  return (\n    <Container className=\"mt-4\" fluid>\n      <Row>\n        <Col md={{ span: 6, offset: 3 }}>\n          <h1>{user.name}'s Exam Result Page</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={{ span: 6, offset: 3 }}>\n          {exam.map((quiz, idx) => {\n            return (\n              <Card key={idx}>\n                {quiz.isRetest ? (\n                  <Card.Header as=\"h5\">\n                    {quiz.date} <span style={{ color: 'red' }}>(RE-TEST)</span>\n                  </Card.Header>\n                ) : (\n                  <Card.Header as=\"h5\">{quiz.date}</Card.Header>\n                )}\n                <Card.Body>\n                  <Card.Text>Level: {quiz.level}</Card.Text>\n                  <Card.Text>Range: {quiz.range}</Card.Text>\n                  <Card.Text>\n                    Pass or Fail :{' '}\n                    {quiz.isPass ? (\n                      <span style={{ color: 'green' }}>Pass</span>\n                    ) : (\n                      <span style={{ color: 'red' }}>Fail</span>\n                    )}\n                  </Card.Text>\n                  <Button\n                    variant=\"info\"\n                    onClick={(event) => {\n                      // go to question detail page\n                      history.push({\n                        pathname: '/user-scores/person/questions',\n                        state: { exam: exam[idx], user: user },\n                      })\n                    }}\n                  >\n                    See Detail\n                  </Button>\n                </Card.Body>\n              </Card>\n            )\n          })}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default UserScorePerson\n","import {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Container, Card, Row, Col, ListGroup, Button} from 'react-bootstrap'\nimport {useHistory} from \"react-router-dom\";\n\nfunction UserTestQuestion(props) {\n    const history = useHistory();\n\n    const exam = props.location.state.exam\n    const user = props.location.state.user\n\n    const token = localStorage.getItem('token');\n\n    // compare function for sorting examQuestion\n    const compare = (examQuestion1, examQuestion2) => {\n        if (examQuestion1.question_num < examQuestion2.question_num) {\n            return -1;\n        } else if (examQuestion1.question_num > examQuestion2.question_num) {\n            return 1;\n        }\n        return 0;\n    }\n\n    // array of objects containing student's answers for each question (word || sentence)\n    // setting it depending on the type of test\n    let examQuestions\n    exam.testType === 'word'\n        ? (examQuestions = exam.examQuestion)\n        : (examQuestions = exam.sentenceResponses)\n\n    // sort examQuestion\n    examQuestions.sort(compare);\n\n    const [questionAnswer, setQuestionAnswer] = useState([])\n\n    useEffect(() => {\n        const range = exam.range.split('_') // level_from_to\n        const level = exam.level\n        const from = range[1]\n        const to = range[2]\n        const testType = exam.testType // if it's vocab question or sentence question\n        let questionsOrSentence\n\n        testType === 'word'\n            ? (questionsOrSentence = 'questions')\n            : (questionsOrSentence = 'sentence')\n\n        axios\n            .get(\n                `${questionsOrSentence}?level=${level}&from=${from}&to=${to}&testType=${testType}`,\n                {\n                    headers: {Authorization: `Bearer ${token}`},\n                },\n            )\n            .then((result) => {\n                setQuestionAnswer(result.data)\n            })\n    }, [])\n\n    // data - object containing info\n    const editIsCorrect = async (data) => {\n        const questionId = data.id;\n        await axios.patch(`response/${questionId}`, {...data, testType: exam.testType, examId: exam.id, range: exam.range}, {\n            headers: {Authorization: `Bearer ${token}`},\n        })\n            .then((response) => {\n                // success - redirect to homepage\n                // history.go(0);\n                history.push('../');\n            })\n            .catch((err) => {\n                alert(\"Not able to change answers at the moment. Try again later!\");\n            });\n    }\n\n    return (\n        <Container className=\"mt-4\" fluid>\n            <Row>\n                <Col md={{span: 6, offset: 4}}>\n                    <h1>\n                        {user.name}'s {exam.date} exam\n                    </h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{span: 6, offset: 4}}>\n                    <h2>Exam Average: {exam.average}%</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{span: 6, offset: 4}}>\n                    <ListGroup className=\"mt-2\">\n                        {questionAnswer.map((answer, idx) => {\n                            return !answer ? null : (\n                                <Card key={idx}>\n                                    {examQuestions[idx].isCorrect ? (\n                                        <Card.Header as=\"h3\" style={{color: 'green'}}>\n                                            {examQuestions[idx].question_num}\n                                            <Button variant='danger' className='float-end' onClick={() => {\n                                                // correct => change to wrong\n                                                editIsCorrect({\n                                                    id: examQuestions[idx].id,\n                                                    isCorrect: !examQuestions[idx].isCorrect\n                                                });\n                                            }}>Set Wrong</Button>\n                                        </Card.Header>\n                                    ) : (\n                                        <Card.Header as=\"h3\" style={{color: 'red'}}>\n                                            {examQuestions[idx].question_num}\n                                            <Button variant='success' className='float-end' onClick={() => {\n                                                // wrong => change to correct\n                                                editIsCorrect({\n                                                    id: examQuestions[idx].id,\n                                                    isCorrect: !examQuestions[idx].isCorrect\n                                                })\n                                            }}>Set Correct</Button>\n                                        </Card.Header>\n                                    )}\n                                    <Card.Body>\n                                        <Card.Text>\n                                            Question:\n                                            {examQuestions[idx].isMeaning\n                                                ? answer.question\n                                                : answer.answer}\n                                        </Card.Text>\n                                        <Card.Text>\n                                            Answer:\n                                            {examQuestions[idx].isMeaning\n                                                ? answer.answer\n                                                : answer.question}\n                                        </Card.Text>\n                                        <Card.Text>\n                                            Student's Answer:\n                                            {examQuestions[idx].answer}\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            )\n                        })}\n                    </ListGroup>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default UserTestQuestion\n","import { useHistory } from 'react-router-dom'\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { Form, Button, Container } from 'react-bootstrap'\nimport axios from 'axios'\n\nfunction CreateTest() {\n  const history = useHistory()\n  const { register, handleSubmit } = useForm()\n  const xlsx = require('xlsx')\n  const token = localStorage.getItem('token')\n\n  // init states\n  // for create test button: create word || create sentence || update word || update sentence\n  const [buttonState, setButtonState] = useState('create word')\n\n  /**\n   *\n   * @param {*} data - contains parsed input fields and uses name attribute to create object fields\n   */\n  const onSubmit = (data) => {\n    const reader = new FileReader()\n    const level = data.level\n    reader.onload = async (evt) => {\n      const bstr = evt.target.result\n      const wb = xlsx.read(bstr, { type: 'binary' })\n      const wsname = wb.SheetNames[0]\n      const ws = wb.Sheets[wsname]\n      const data = xlsx.utils.sheet_to_json(ws, { header: 1 })\n      try {\n        if (buttonState === 'create word') {\n          await axios.post(\n            'questions',\n            { data, level },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            },\n          )\n        } else if (buttonState === 'create sentence') {\n          await axios.post(\n            'sentence',\n            { data, level },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            },\n          )\n        } else if (buttonState === 'update word') {\n          await axios.patch(\n            'questions',\n            { data, level },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            },\n          )\n        } else {\n          await axios.patch(\n            'sentence',\n            { data, level },\n            {\n              headers: { Authorization: `Bearer ${token}` },\n            },\n          )\n        }\n        history.push('/')\n      } catch (err) {\n        history.push('/')\n        console.log(err)\n      }\n    }\n    reader.readAsBinaryString(data.exam[0])\n    // const result = excelToJson({ sourceFile: data.exam[0] })\n  }\n\n  return (\n    // <Form onSubmit={this.onSubmit}>\n    <Container className=\"mt-4\">\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Group controlId=\"formFile\" className=\"mb-3\">\n          {/* <select {...register('type', {required: true})}>\n                        <option>Select Level</option>\n                        <option value=\"word\">Word Questions</option>\n                        <option value=\"sentence\">Sentence Questions</option>\n                    </select> */}\n          <Form.Control\n            type=\"text\"\n            {...register('level', { required: true })}\n            placeholder=\"Enter Level\"\n          />\n          <Form.Control\n            {...register('exam', { required: true })}\n            type=\"file\"\n            size=\"lg\"\n            // onChange={(e) => (this.level = e.target.value)}\n          />\n        </Form.Group>\n        <Button\n          variant=\"success\"\n          type=\"submit\"\n          onClick={(e) => setButtonState('create word')}\n        >\n          Create Word\n        </Button>\n        <Button\n          variant=\"success\"\n          type=\"submit\"\n          onClick={(e) => setButtonState('create sentence')}\n        >\n          Create Sentence\n        </Button>\n        <Button\n          variant=\"success\"\n          type=\"submit\"\n          onClick={(e) => setButtonState('update word')}\n        >\n          Update Word\n        </Button>\n        <Button\n          variant=\"success\"\n          type=\"submit\"\n          onClick={(e) => setButtonState('update sentence')}\n        >\n          Update Sentence\n        </Button>\n      </Form>\n    </Container>\n  )\n}\n\nexport default CreateTest\n","import {useHistory} from \"react-router-dom\";\nimport React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {Button, Col, Container, Form, Table} from \"react-bootstrap\";\nimport Question from \"../components/Question\";\n\nfunction Retest(props) {\n    // init history\n    const history = useHistory();\n\n    // get props from history (from Home.js)\n    const range = props.location.state.range;\n    const testType = props.location.state.testType;\n\n    // split range to get level, from, to\n    const splitRange = range.split('_');\n    const level = splitRange[0];\n    const from = splitRange[1];\n    const to = splitRange[2];\n\n\n    // construct url\n    const url = 'retests/questions?range=' + range + '&testType=' + testType\n\n    // init states\n    const [questions, setQuestions] = useState([]);\n    const [myAnswers, setMyAnswers] = useState([]);\n    const [answers, setAnswers] = useState([]);\n    const [questionNum, setQuestionNum] = useState([]);\n    const [isMeaning, setIsMeaning] = useState([]);\n    const [isCorrect, setIsCorrect] = useState([]) // isCorrect ? true : false\n    const [originalQuestion, setOriginalQuestion] = useState([])\n    const [submitButton, setSubmitButton] = useState(true)\n\n    // get value from local storage\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        axios.get(url, {headers: {Authorization: `Bearer ${token}`}})\n            .then(result => {\n                // check if retest questions exist\n                if (result.data.length === 0) {\n                    return;\n                }\n                setOriginalQuestion(result.data);\n\n                let localQuestions = []\n                let localAnswers = []\n                let localQuestionNum = []\n                let localIsMeaning = []\n\n                for (let [i, question] of result.data.entries()) {\n                    localQuestions[i] = question.question;\n                    localAnswers[i] = question.answer\n                    localQuestionNum[i] = question.question_num\n                    localIsMeaning[i] = question.isMeaning\n                }\n                setQuestions(localQuestions)\n                setAnswers(localAnswers)\n                setQuestionNum(localQuestionNum)\n                setIsMeaning(localIsMeaning)\n            })\n    }, [])\n\n\n    const submitAnswers = async (event) => {\n        event.preventDefault()\n        checkVocabAnswers();\n\n        let data = {\n            testType,\n            question_num: questionNum,\n            questions,\n            range: range,\n            answer: answers,\n            myAnswers,\n            isMeaning,\n            retest: true\n        }\n\n        setSubmitButton(false);\n\n        await axios.post('response', data, {\n            headers: {Authorization: `Bearer ${token}`},\n        })\n    }\n\n    const checkVocabAnswers= () => {\n        let tmpIsCorrect = []\n        for (let i in answers) {\n            let correctAnswer = answers[i]\n            let myAnswer = myAnswers[i]\n\n            tmpIsCorrect[i] = correctAnswer === myAnswer ? 'correct' : 'wrong'\n        }\n        setIsCorrect(tmpIsCorrect)\n        // https://en.wikipedia.org/wiki/Levenshtein_distance\n    }\n\n    const handleChange = (event, index) => {\n        let localAnswers = [...myAnswers]\n        localAnswers[index] = event.target.value\n        setMyAnswers(localAnswers);\n    }\n\n    return (\n        <Container className=\"mt-4\" fluid>\n            <Col md={{span: 4, offset: 4}}>\n                <h1>Re-Test</h1>\n                <h3>Level: {level} </h3>\n                <h3>Range: {from} - {to}</h3>\n                <h3>Test Type: {testType}</h3>\n            </Col>\n            <Form onSubmit={submitAnswers}>\n                <Form.Group>\n                    <Table striped bordered hover>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Question</th>\n                            <th>Answer</th>\n                            <th>Is Correct</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {originalQuestion.map((question, i) => (\n                            <tr key={i}>\n                                <td>{questionNum[i]}</td>\n                                <td>{questions[i]}</td>\n                                <td>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"answer -> 모르면 x 적기\"\n                                        onChange={(event) => handleChange(event, i)}\n                                        name={question.question_num}\n                                        required\n                                    />\n                                </td>\n                                <td>{isCorrect ? <span>{isCorrect[i]}</span> : null}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </Table>\n                </Form.Group>\n                {submitButton ?\n                    <Button type=\"submit\" color=\"primary\" size=\"lg\">\n                        Submit Re-Test\n                    </Button>\n                    :\n                    <Button\n                        onClick={(event) => history.push('/')}\n                        size=\"lg\"\n                        color=\"success\"\n                        variant=\"success\"\n                    >\n                        Home Page\n                    </Button>\n                }\n            </Form>\n        </Container>\n    );\n}\n\nexport default Retest","import {useHistory} from \"react-router-dom\";\nimport {Button, Container, Form} from \"react-bootstrap\";\nimport React from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport levels from \"../files/levels.json\";\nimport axios from \"axios\";\n\nexport default function CreateUser() {\n    // get history\n    const history = useHistory();\n\n    // react-hook-form setup\n    const {register, handleSubmit, watch, formState: {errors}} = useForm();\n\n    // init all states\n\n    const onSubmit = async (data) => {\n\n        try {\n            const token = localStorage.getItem('token')\n            await axios.post('auth/signUp', data, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            history.push(\"/\");\n        } catch (error) {\n            alert(\"Create User Failed\");\n        }\n    }\n\n    return (\n        <Container className=\"mt-4\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"username\" {...register(\"username\", {required: true})} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"password\" {...register(\"password\", {required: true})} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"name\" {...register(\"name\", {required: true})} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Level</Form.Label>\n                    <Form.Control as=\"select\" {...register(\"level\")}>\n                        {levels.levels.map((item, idx) => {\n                            return <option key={idx}>{item}</option>\n                        })}\n                    </Form.Control>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </Container>\n    );\n\n}","import {useHistory} from \"react-router-dom\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {Col, Container, FormControl, ListGroup, Row} from \"react-bootstrap\";\n\nfunction AllUsers() {\n    // history\n    const history = useHistory();\n\n    // token\n    const token = localStorage.getItem(\"token\");\n\n    // define state\n    const [users, setUsers] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('')\n    const [searchCategory, setSearchCategory] = useState('')\n\n    useEffect(() => {\n        axios.get('auth/users', {headers: {Authorization: `Bearer ${token}`}})\n            .then((result) => {\n                setUsers(result.data);\n            })\n\n    }, []);\n\n\n    return (\n        <Container className=\"mt-4\" fluid>\n            <Row>\n                <Col md={{span: 2, offset: 4}}>\n                    <FormControl\n                        as=\"select\"\n                        onChange={(event) => {\n                            setSearchCategory(event.target.value)\n                        }}\n                    >\n                        <option value=\"studentName\">Name</option>\n                        <option value=\"userName\">Username</option>\n                        <option value=\"userLevel\">Level</option>\n                    </FormControl>\n                </Col>\n                <Col md={{span: 4, offset: 0}}>\n                    <FormControl\n                        placecholder=\"Search...\"\n                        onChange={(event) => {\n                            setSearchTerm(event.target.value)\n                        }}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{span: 6, offset: 4}}>\n                    <ListGroup className=\"mt-2\">\n                        {users\n                            .filter((user) => {\n                                if (searchTerm == '') {\n                                    return user\n                                } else if (\n                                    searchCategory === 'studentName' &&\n                                    user.name.toLowerCase().includes(searchTerm.toLowerCase())\n                                ) {\n                                    return user\n                                } else if (\n                                    searchCategory === 'userName' &&\n                                    user.username.toLowerCase().includes(searchTerm.toLowerCase())\n                                ) {\n                                    return user\n                                } else if (\n                                    searchCategory === 'userLevel' &&\n                                    user.level.toLowerCase().includes(searchTerm.toLowerCase())\n                                ) {\n                                    return user\n                                }\n                            })\n                            .map((user, idx) => {\n                                return (\n                                    <ListGroup.Item\n                                        key={idx}\n                                        as=\"button\"\n                                        variant=\"success\"\n                                        style={{color: 'black'}}\n                                        onClick={(event) => {\n                                            alert(\"[TODO] - Need to implement delete user and onclick. Try using /:user\");\n                                            // history.push({\n                                            //     pathname: '/user-scores/person',\n                                            //     state: {user: user},\n                                            // })\n                                        }}\n                                    >\n                                        {user.name} - {user.username} - {user.level}\n                                    </ListGroup.Item>\n                                )\n                            })}\n                    </ListGroup>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default AllUsers;","import {Container, Table} from \"react-bootstrap\";\nimport React from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nfunction WordTable(props) {\n    const history = useHistory();\n    return (\n       <Container className=\"mt-4\" fluid>\n           <Table striped bordered hover>\n               <thead>\n               <tr>\n                   <th>#</th>\n                   <th>Word</th>\n                   <th>Meaning</th>\n               </tr>\n               </thead>\n               <tbody>\n               {props.wordList.map((word, idx) => {\n                   return !word ? null : (\n                       <tr key={idx}>\n                           <td>{idx + 1}</td>\n                           <td>{word.question}</td>\n                           <td>{word.answer}</td>\n                       </tr>\n                   )\n               })}\n               </tbody>\n           </Table>\n       </Container>\n    )\n}\n\nexport default WordTable","import {useHistory} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {useForm} from \"react-hook-form\";\nimport {Button, Container, Form} from \"react-bootstrap\";\nimport levels from \"../files/levels.json\";\nimport React, {useState} from \"react\";\nimport WordTable from \"../components/WordTable\";\n\nfunction WordList() {\n    // history\n    const history = useHistory();\n\n    // token\n    const token = localStorage.getItem(\"token\");\n\n    // logged in user's role\n    const role = localStorage.getItem(\"role\");\n\n    // logged in user's level\n    const level = localStorage.getItem(\"level\");\n\n    // react-hook-form\n    const {register, handleSubmit} = useForm();\n\n    // state\n    const [wordList, setWordList] = useState([]);\n\n    // click event listener\n    const onSubmit = async (data) => {\n        // not admin and selected level that person isn't in\n        if (role !== 'admin' && level !== data.level) {\n            alert(\"You can only view words from your level\");\n            return;\n        }\n\n        try {\n            if (data.testType === \"word\") {\n                const words = await axios.get(`questions/${level}`, {\n                    headers: {Authorization: `Bearer ${token}`},\n                })\n                setWordList(words.data);\n            } else {\n                const sentence = await axios.get(`sentence/${level}`, {\n                    headers: {Authorization: `Bearer ${token}`},\n                })\n                setWordList(sentence.data);\n            }\n        } catch (error) {\n            alert(\"Create User Failed\");\n        }\n\n    }\n\n    return (\n        <Container className=\"mt-4\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Test Type</Form.Label>\n                    <Form.Control as=\"select\" {...register(\"testType\", {required: true})} >\n                        <option>word</option>\n                        <option>sentence</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Level</Form.Label>\n                    <Form.Control as=\"select\" {...register(\"level\")}>\n                        {levels.levels.map((item, idx) => {\n                            return <option key={idx}>{item}</option>\n                        })}\n                    </Form.Control>\n                </Form.Group>\n                <Button variant=\"success\" type=\"submit\">\n                    Get Word List\n                </Button>\n            </Form>\n\n            {wordList.length > 0 ?\n                (\n                    <>\n                        <h1>- Word List -</h1>\n                        <WordTable\n                            wordList={wordList}\n                        />\n                    </>\n                )\n                :\n                null\n            }\n        </Container>\n    )\n\n}\n\nexport default WordList","// level , from , to , testType\n\nimport {useHistory} from \"react-router-dom\";\nimport React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {Button, Col, Container, Form, Row, Table} from \"react-bootstrap\";\n\nfunction WordTest(props) {\n    // init history\n    const history = useHistory();\n\n    // token from local storage\n    const token = localStorage.getItem('token');\n\n    // get props from history\n    const {level, from, to, testType, questionType, retest} = props.location.state;\n\n    // determine which table to get questions from\n    let questionsOrSentence = testType === \"word\" ? \"questions\" : \"sentence\";\n\n    // construct url\n    const url = `${questionsOrSentence}?level=${level}&from=${from}&to=${to}&testType=${testType}`;\n\n    // init states\n    const [questions, setQuestions] = useState([]) // set either english or Korean\n    const [myAnswers, setMyAnswers] = useState([]) // user's answers\n    const [answers, setAnswers] = useState([])\n    const [isCorrect, setIsCorrect] = useState([]) // isCorrect ? true : false\n    const [questionNum, setQuestionNum] = useState([]) // Question number for each\n    const [isMeaning, setIsMeaning] = useState([]) // isMeaning ? true : false\n    const [originalQuestion, setOriginalQuestion] = useState([])\n    const [submitButton, setSubmitButton] = useState(true)\n\n\n    useEffect(() => {\n        axios.get(url, {\n            headers: {Authorization: `Bearer ${token}`},\n        })\n            .then((result) => {\n                if (result.data.length === 0)\n                    return;\n\n                setOriginalQuestion(result.data);\n\n                let localQuestions = []\n                let localAnswers = []\n                let localQuestionNum = []\n                let localIsMeaning = []\n\n                let isMeaning;\n\n                // assigning question and answer based on the question type\n                for (let [i, question] of result.data.entries()) {\n                    // need to swap [word and sentence] when question type is word\n                    if (questionType === \"word\") {\n                        isMeaning = false;\n                        localQuestions[i] = question.answer;\n                        localAnswers[i] = question.question;\n                    } else if (questionType === \"meaning\") {\n                        isMeaning = true;\n                        localQuestions[i] = question.question\n                        localAnswers[i] = question.answer\n                    } else {\n                        // randomly mix it\n                        isMeaning = !!Math.round(Math.random());\n                        if (!isMeaning) {\n                            localQuestions[i] = question.answer;\n                            localAnswers[i] = question.question;\n                        }\n                    }\n                    localQuestionNum[i] = question.question_num\n                    localIsMeaning[i] = isMeaning\n                }\n\n                // mix the localAnswers -> word bank list words in different order\n                // TODO\n\n\n                setQuestions(localQuestions)\n                setAnswers(localAnswers)\n                setQuestionNum(localQuestionNum)\n                setIsMeaning(localIsMeaning)\n\n            })\n    }, []);\n\n\n    const submitAnswers = async (event) => {\n        event.preventDefault()\n        checkVocabAnswers()\n\n        let range = `${level}_${from}_${to}`;\n\n        let data = {\n            testType,\n            question_num: questionNum,\n            questions,\n            range: range,\n            answer: answers,\n            myAnswers,\n            isMeaning,\n            retest\n        }\n\n        await axios.post('response', data, {\n            headers: {Authorization: `Bearer ${token}`},\n        })\n        setSubmitButton(false);\n    }\n\n    /**\n     * TODO - Answer Check Algorithm\n     * Algorithm for checking if answer is correct\n     * Another answer check happens in the backend [in case altered by user]\n     */\n    const checkVocabAnswers = () => {\n        let tmpIsCorrect = []\n        for (let i in answers) {\n            let correctAnswer = answers[i]\n            let myAnswer = myAnswers[i]\n\n            tmpIsCorrect[i] = correctAnswer === myAnswer ? 'correct' : 'wrong'\n        }\n        setIsCorrect(tmpIsCorrect)\n        // https://en.wikipedia.org/wiki/Levenshtein_distance\n    }\n\n    const handleChange = (event, index) => {\n        let localAnswers = [...myAnswers]\n        localAnswers[index] = event.target.value\n        setMyAnswers(localAnswers);\n    }\n\n    return (\n        <Container className=\"mt-4\" fluid>\n            <Row>\n                <Col md={{span: 4, offset: 4}}>\n                    <h1>Level: {level} From: {from} To: {to}</h1>\n                </Col>\n            </Row>\n            <Form onSubmit={submitAnswers}>\n                <Form.Group>\n                    <Table striped bordered hover>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Question</th>\n                            <th>Answer</th>\n                            <th>Is Correct</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {originalQuestion.map((question, i) => (\n                            <tr key={i}>\n                                <td>{questionNum[i]}</td>\n                                <td>{questions[i]}</td>\n                                <td>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"answer -> 모르면 x 적기\"\n                                        onChange={(event) => handleChange(event, i)}\n                                        name={question.question_num}\n                                        required\n                                    />\n                                </td>\n                                <td>{isCorrect ? <span>{isCorrect[i]}</span> : null}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </Table>\n                </Form.Group>\n                {submitButton ?\n                    <Button name=\"wordBtn\" type=\"submit\" color=\"primary\" size=\"lg\">\n                        Submit\n                    </Button>\n                    :\n                    <Button\n                        onClick={(event) => history.push('/')}\n                        size=\"lg\"\n                        color=\"success\"\n                        variant=\"success\"\n                    >\n                        Home Page\n                    </Button>\n                }\n            </Form>\n        </Container>\n\n    )\n\n}\n\nexport default WordTest;","import React, {useState} from 'react'\nimport {Switch, Route, HashRouter} from 'react-router-dom'\nimport __StartTest from './routes/__StartTest'\nimport Home from './routes/Home'\nimport Navigation from './components/Navigation'\nimport Login from './routes/Login'\nimport Plan from './routes/Plan'\nimport UserScore from './routes/UserScore'\nimport ProtectedRoute from './functions/ProtectedRoute'\nimport UserScorePerson from './routes/UserScorePerson'\nimport UserTestQuestion from './routes/UserTestQuestion'\nimport CreateTest from './routes/CreateTest'\nimport Retest from \"./routes/Retest\";\nimport CreateUser from \"./routes/CreateUser\";\nimport AllUsers from \"./routes/AllUsers\";\nimport WordList from \"./routes/WordList\";\nimport WordTest from \"./routes/WordTest\";\n\nfunction App() {\n    const [token, setToken] = useState(localStorage.getItem('token'))\n    const [user, setUser] = useState(localStorage.getItem('name'))\n\n    return (\n        <HashRouter>\n            <Navigation\n                appToken={token}\n                setAppToken={setToken}\n                appUser={user}\n                setAppUser={setUser}\n            />\n            <Switch>\n                {/*<Route exact path=\"/startTest\" component={__StartTest}/>*/}\n                <Route exact path=\"/startTest\" component={WordTest}/>\n                <Route exact path=\"/signin\">\n                    <Login setAppUser={setUser}/>\n                </Route>\n                <ProtectedRoute\n                    exact\n                    path=\"/createPlan\"\n                    component={Plan}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                    appUser={user}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/user-scores/person\"\n                    component={UserScorePerson}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                />\n                <ProtectedRoute\n                    path=\"/retests\"\n                    component={Retest}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/user-scores/person/questions\"\n                    component={UserTestQuestion}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/user-scores\"\n                    component={UserScore}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                    appUser={user}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/create-users\"\n                    component={CreateUser}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/users\"\n                    component={AllUsers}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                />\n                <ProtectedRoute\n                    exact\n                    path=\"/createTest\"\n                    component={CreateTest}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                    appUser={user}\n                />\n                <Route\n                    exact\n                    path=\"/word-list\"\n                    component={WordList}\n                    setAppToken={setToken}\n                    setAppUser={setUser}\n                    appUser={user}\n                />\n                {/* <Route exact path=\"/createPlan\" component={Plan} /> */}\n                <Route path=\"/\" exact={true}>\n                    <Home appUser={user} setAppToken={setToken} setAppUser={setUser}/>\n                </Route>\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL || \"http://localhost:4000\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}